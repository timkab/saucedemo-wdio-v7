import { Options, Capabilities } from '@wdio/types';
import SevereServiceErrorImport from 'webdriverio/src/utils/SevereServiceError';
import type { AttachOptions } from 'webdriverio/src/types';
export declare type RemoteOptions = Options.WebdriverIO & Omit<Options.Testrunner, 'capabilities'>;
/**
 * A method to create a new session with WebdriverIO
 *
 * @param  {Object} [params={}]       Options to create the session with
 * @param  {function} remoteModifier  Modifier function to change the monad object
 * @return {object}                   browser object with sessionId
 */
export declare const remote: (params: RemoteOptions, remoteModifier?: Function | undefined) => Promise<WebdriverIO.Browser>;
export declare const attach: (attachOptions: AttachOptions) => Promise<WebdriverIO.Browser>;
export declare const multiremote: (params: Capabilities.MultiRemoteCapabilities, { automationProtocol }?: {
    automationProtocol?: string | undefined;
}) => Promise<WebdriverIO.MultiRemoteBrowser>;
export declare const SevereServiceError: typeof SevereServiceErrorImport;
export * from 'webdriverio/src/types';
export * from 'webdriverio/src/utils/interception/types';
//# sourceMappingURL=index.d.ts.map